/*******************************************************************************
 * Copyright (c) 2012, THE BOARD OF TRUSTEES OF THE LELAND STANFORD JUNIOR UNIVERSITY
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 *    Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *    Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *    Neither the name of the STANFORD UNIVERSITY nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *******************************************************************************/

buildscript {
        repositories {
                mavenCentral()
        }

        dependencies {
                classpath group:'com.github.cycladessoa.nyxlets', name:'servicebroker', version:'latest.integration'
        }
}

import org.cyclades.engine.stroma.xstroma.XSTROMARequestBuilder
import org.cyclades.engine.stroma.xstroma.XSTROMABrokerRequest
import org.cyclades.engine.stroma.xstroma.STROMARequestBuilder
import org.cyclades.engine.stroma.xstroma.STROMARequest
import org.cyclades.engine.util.TransactionIdentifier
import org.cyclades.client.DevOps

task installNyxlets () {
    description = 'Upload and deploy the Nyxlets of this workspace to the specified Cyclades Service Engines in the list (property "engines"), via provided HTTP APIs'
    doLast () {
        tasks.uploadNyxlets.execute()
        tasks.deployNyxlets.execute()
    }
}

task uploadNyxlets () {
    description = 'Consider using "installNyxlets" and "rollBackNyxlets"'
    doLast () {
        String faultStrategy = (exit_on_failure.equalsIgnoreCase("true")) ? "EXCEPTION" : "NOTHING";
        String password = (rootProject.hasProperty('admin_service_password')) ? admin_service_password : null 
        DevOps.uploadFileToCluster(engines.split("[,]"), password, nyxlet_source_upload_path, target_upload_nyxlet_installation_path, true, faultStrategy, true)
    }
}

task reloadServiceEngines () {
    description = 'Reloads the Cyclades Service Engines in the specified list (property "engines")'
    doLast () {
        String faultStrategy = (exit_on_failure.equalsIgnoreCase("true")) ? "EXCEPTION" : "NOTHING";
        DevOps.reloadServiceEnginesOnCluster(engines.split("[,]"), faultStrategy, false, true)
    }
}

task reloadServiceEnginesSafetyMode () {
    description = 'Reloads the Cyclades Service Engines in the specified list (property "engines") in safety mode'
    doLast () {
        String faultStrategy = (exit_on_failure.equalsIgnoreCase("true")) ? "EXCEPTION" : "NOTHING";
        DevOps.reloadServiceEnginesOnCluster(engines.split("[,]"), faultStrategy, true, true)
    }
}

task deployNyxlets () {
    description = 'Consider using "installNyxlets" and "rollBackNyxlets"'
    doLast () {
        String faultStrategy = (exit_on_failure.equalsIgnoreCase("true")) ? "EXCEPTION" : "NOTHING";
        String tid = new TransactionIdentifier(transaction_identifier_prefix).getTransactionID()
        displayRunMessage(tid)
        DevOps.executeClusteredXSTROMARequests(engines.split("[,]"), generateDeploymentRequests(tid), faultStrategy, true)
        DevOps.reloadServiceEnginesOnCluster(engines.split("[,]"), faultStrategy, false, true)
    }
}

def generateDeploymentRequests (tid) {
    // Create X-STROMA request builder
    List<XSTROMABrokerRequest> cycladesSOARequests = new ArrayList<XSTROMABrokerRequest>()
    XSTROMARequestBuilder xstromaBuilder = XSTROMARequestBuilder.newInstance(null)
    
    // Add X-STROMA level parameters
    xstromaBuilder
    .parameter("transaction-data", tid.toString())
    .parameter("duration", "true")
    .parameter("service-agent", "true")
    .parameter("enable-orchestration-fault", "true")
    .json()
    
    if (rootProject.hasProperty('admin_service_password')) xstromaBuilder.parameter("password", admin_service_password)

    // Download new resource (we don't need this if we have already pushed a deployment here)
    // This is in the event that a.) you are running on local host or b.) a deployment exists in a
    // directory somewhere that can be accessed
    if (rootProject.hasProperty('target_engine_source_download_path')) {
        xstromaBuilder.add(
            STROMARequestBuilder.newInstance("admin")
            .parameter("action", "add")
            .parameter("source", (!target_engine_source_download_path.isEmpty()) ? target_engine_source_download_path : "${buildDir}/distributions/nyxlets.zip")
            .parameter("uri", target_engine_temp_installation_path)
        )
    }

    // Archive active resource
    xstromaBuilder.add(
        STROMARequestBuilder.newInstance("admin")
        .parameter("action", "zipdirectory")
        .parameter("source", "WEB-INF/nyxlets")
        .parameter("uri", "WEB-INF/backup/nyxlets.zip")
    )

    // Remove current active resource
    xstromaBuilder.add(
        STROMARequestBuilder.newInstance("admin")
        .parameter("action", "delete")
        .parameter("dir", "true")
        .parameter("uri", "WEB-INF/nyxlets")
    )

    // Install new resource
    xstromaBuilder.add(
        STROMARequestBuilder.newInstance("admin")
        .parameter("action", "unzipdirectory")
        .parameter("source", target_engine_temp_installation_path)
        .parameter("uri", "WEB-INF")
    )

    // Delete installation file
    if (rootProject.hasProperty('target_engine_temp_installation_path_delete') && target_engine_temp_installation_path_delete.equalsIgnoreCase("true")) {
        xstromaBuilder.add(
            STROMARequestBuilder.newInstance("admin")
            .parameter("action", "delete")
            .parameter("uri", target_engine_temp_installation_path)
        )
    }

    cycladesSOARequests.add(xstromaBuilder.build())
    return cycladesSOARequests
}

task rollBackNyxlets () {
    description = 'Rollback a previous Nyxlet installation remotely on the specified Cyclades Service Engines in the list (property "engines"), via provided HTTP APIs'
    doLast () {
        String faultStrategy = (exit_on_failure.equalsIgnoreCase("true")) ? "EXCEPTION" : "NOTHING";
        String tid = new TransactionIdentifier(transaction_identifier_prefix).getTransactionID()
        displayRunMessage(tid)
        DevOps.reloadServiceEnginesOnCluster(engines.split("[,]"), faultStrategy, true, true)
        DevOps.executeClusteredSTROMARequests(engines.split("[,]"), generateRollbackRequests(tid), faultStrategy, true)
        DevOps.reloadServiceEnginesOnCluster(engines.split("[,]"), faultStrategy, false, true)
    }
}

def generateRollbackRequests (tid) {
    List<STROMARequest> cycladesSOARequests = new ArrayList<STROMARequest>()

    String tempResource = "/tmp/nyxlets.tmp.zip"
    String password = (rootProject.hasProperty('admin_service_password')) ? admin_service_password : "n/a"

    // Download new resoucre (Do this more to verify it exists before deleting anything)
    cycladesSOARequests.add(
        STROMARequestBuilder.newInstance("admin")
        .parameter("transaction-data", tid.toString())
        .parameter("duration", "true")
        .parameter("service-agent", "true")
        .json()
        .parameter("action", "add")
        .parameter("source", "WEB-INF/backup/nyxlets.zip")
        .parameter("uri", tempResource)
        .parameter("password", password)
        .build()
    )

    // Remove current active resource
    cycladesSOARequests.add(
        STROMARequestBuilder.newInstance("admin")
        .parameter("transaction-data", tid.toString())
        .parameter("duration", "true")
        .parameter("service-agent", "true")
        .json()
        .parameter("action", "delete")
        .parameter("dir", "true")
        .parameter("uri", "WEB-INF/nyxlets")
        .parameter("password", password)
        .build()
    )

    // Install backup resource
    cycladesSOARequests.add(
        STROMARequestBuilder.newInstance("admin")
        .parameter("transaction-data", tid.toString())
        .parameter("duration", "true")
        .parameter("service-agent", "true")
        .json()
        .parameter("action", "unzipdirectory")
        .parameter("source", tempResource)
        .parameter("uri", "WEB-INF/nyxlets")
        .parameter("password", password)
        .build()
    )

    // Delete installation file
    cycladesSOARequests.add(
        STROMARequestBuilder.newInstance("admin")
        .parameter("transaction-data", tid.toString())
        .parameter("duration", "true")
        .parameter("service-agent", "true")
        .json()
        .parameter("action", "delete")
        .parameter("uri", tempResource)
        .parameter("password", password)
        .build()
    )

    return cycladesSOARequests
}

def displayRunMessage (tid) {
    println "\nSubmitting jobs with transaction id: ${tid}"
}
